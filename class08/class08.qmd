---
title: "Class 8: Breast cancer mini project"
author: "Barry"
format: html
toc: true
---

## Background

This mini-project explores unsupervised learning techniques applied to the Wisconsin Breast Cancer Diagnostic Data Set, which contains measurements of human breast mass cell nuclei. The project guides the user through exploratory data analysis, performing and interpreting Principal Component Analysis (PCA) to reduce the dimensionality of the data while retaining variance, and applying hierarchical clustering with different linkage methods. It also includes an optional section on K-means clustering for comparison. The ultimate goal is to combine PCA and clustering to better separate benign and malignant cell samples, evaluating the results using metrics like sensitivity and specificity, and finally demonstrating how to predict the classification of new samples using the developed PCA model.

## Data import

Our data come from the U. of Wisconsin Medical Center

```{r}
wisc.df <- read.csv("WisconsinCancer.csv", row.names=1)
```

> Q1. How many patients/samples are in this dataset?

```{r}
nrow(wisc.df)
```


> Q2. How many of the observations have a malignant diagnosis?

```{r}
table(wisc.df$diagnosis)
```
```{r}
sum(wisc.df$diagnosis == "M")
```


> Q3. How many variables/features in the data are suffixed with _mean?

```{r}
colnames(wisc.df)
```
```{r}
length( grep("mean", colnames(wisc.df), value = T) )
```

There is a diagnosis columnn that is the clinician consenus that I want to exclude from any further analysis. We will come back later and compare our results to this diagnosis.

```{r}
diagnosis <- as.factor(wisc.df$diagnosis)
head(diagnosis)
```
Now we can remove it from the `wisc.df`

```{r}
wisc.data <- wisc.df[,-1]
```

## Clustering 

Let's try a `hclust()`
```{r}
hc <- hclust( dist(wisc.data) )
plot(hc)
```

We can extract clusters from this rather poor dendrogram/tree with the `cutree()`

```{r}
grps <- cutree(hc, k=2)
```

How many individuals in each cluster?

```{r}
table(grps)
```
```{r}
table(diagnosis)
```
We can generate a cross-table that compares our cluster `grps` vector with out `diagnosis` vector values

```{r}
table(diagnosis, grps)
```

## Principal Component Analysis

### The importance data scalling

The main function for PCA in base R is `prcomp()` it has a default input paramater of `scale=FALSE`.


```{r}
#prcomp()
head(mtcars)
```

We could do a PCA of this data as is and it could be mis-leading...

```{r}
pc <- prcomp(mtcars)
biplot(pc)
```

Let's look at the mean values of each column and their standard deviation.

```{r}
colMeans(mtcars)
```
```{r}
apply(mtcars, 2, sd)
```
We can "scale" this data before PCA to get a much better represention and anlysis of all the columns.

```{r}
mtscale <- scale(mtcars)
```

```{r}
round(colMeans(mtscale))
```

```{r}
apply(mtscale, 2, sd)
```

```{r}
pc.scale <- prcomp(mtscale)
```

We can look at the two main results figures from PCA - the "PC plot" (a.k.a. score plot, ordienation plot, or PC1 vs PC2 plot). The "loadings plot" how the origional vatiables contribute to the new PCs

A loadings plot of the unscalled PCA results
```{r}
library(ggplot2)

ggplot(pc$rotation) +
  aes(PC1, rownames(pc$rotation)) +
  geom_col()
```

Loadings plot of the scalled data.

```{r}
ggplot(pc.scale$rotation) +
  aes(PC1, rownames(pc$rotation)) +
  geom_col()
```
PC plot of scaled PCA results
```{r}
library(ggrepel)

ggplot(pc.scale$x) +
  aes(PC1, PC2, label=rownames(pc.scale$x)) +
  geom_point() +
  geom_text_repel()
```

> **Key point**: In general we will set `scale=TRUE` when we do PCA. This is not the default but probably should be...


We can check the SD and mean of the different columns in `wisc.data` to see if we need to scale - hint: we do!

### PCA of wisc.data

```{r}
wisc.pr <- prcomp(wisc.data, scale=TRUE)
```

To see how well PCA is doing here in terms capturing the variance (or spread) in the data we can use the `summary()` function.

```{r}
summary(wisc.pr)
```

Let's make the main PC1 vs PC2

```{r}
ggplot(wisc.pr$x) +
  aes(PC1, PC2, col=diagnosis) +
  geom_point() +
  xlab("PC1 (44.3%)") +
  ylab("PC2 (19%)")
```
> Q10. Please answer up to this Q10...

## 5. Combining methods

We can take our PCA results and use them as a basis set for other analysis such as clustering.

### Clustering on PCA results

```{r}
wisc.pr.hclust <- hclust( dist(wisc.pr$x[,1:2]), method="ward.D2" )
plot(wisc.pr.hclust)
```

We can "cut" this tree to yield our clusters (groups):
```{r}
pc.grps <- cutree(wisc.pr.hclust, k=2)
table(pc.grps)
```
How do my cluster grps compare to the expert diagnosos

```{r}
table(diagnosis, pc.grps)
```

```{r}
table(diagnosis)
```






> Q15. How well does the newly created model with four clusters separate out the two diagnoses?



> Q16. How well do the hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.

They did really baddly. We do much better after PCA - the new PCA variables (what we call a basis set) give us much better seperation of M and B


## 7. Prediction

We can use our PCA model for the analysis of new "unseen" data. In this case from U. Mich.


```{r}
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```


> Q18. Which of these new patients should we prioritize for follow up based on your results?
